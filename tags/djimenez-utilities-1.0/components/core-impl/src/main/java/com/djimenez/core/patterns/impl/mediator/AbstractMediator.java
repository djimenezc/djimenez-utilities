package com.djimenez.core.patterns.impl.mediator;

import org.apache.log4j.Logger;

import com.djimenez.core.patterns.impl.observer.AbstractNotifier;
import com.djimenez.core.patterns.interfaces.Facade;
import com.djimenez.core.patterns.interfaces.mvc.Mediator;

public abstract class AbstractMediator extends AbstractNotifier implements
  Mediator {

  private static Logger logger = Logger.getLogger(AbstractMediator.class);

  private String mediatorName = null;

  private Object viewComponent = null;

  protected AbstractMediator() {

    this.mediatorName = this.getClass().getName();
    if (logger.isDebugEnabled()) {
      logger.debug("Initialized Mediator " + this.mediatorName);
    }
  }

  protected AbstractMediator(final Object viewComponent) {
    this();
    this.viewComponent = viewComponent;
    if (logger.isDebugEnabled()) {
      logger.debug("Initialized viewComponent " + this.viewComponent + " @ "
        + this.mediatorName);
    }
  }

  /**
   * @param mediatorName
   *          Try to use autogenerated mediator naming
   */
  protected AbstractMediator(final String mediatorName) {
    this(mediatorName, null);
  }

  /**
   * @param mediatorName
   * @param viewComponent
   *          Try to use autogenerated mediator naming
   */
  protected AbstractMediator(final String mediatorName,
    final Object viewComponent) {

    this.mediatorName = mediatorName;
    this.viewComponent = viewComponent;
    if (logger.isDebugEnabled()) {
      logger.debug("Initialized Mediator " + mediatorName + " for View "
        + viewComponent);
    }
  }

  @Override
  public final void assignFacade(final Facade activefacade) {

    this.setFacade(activefacade);
  }

  @Override
  public final String getMediatorName() {
    return this.mediatorName;
  }

  @Override
  public final Object getViewComponent() {
    return this.viewComponent;
  }

  @Override
  public final void setViewComponent(final Object viewComponent) {
    this.viewComponent = viewComponent;
  }

}
